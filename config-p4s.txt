### Simulation seed
SEED 2345123451234561234
### MAX Simulation time
CYCLE SIZE*CHUNKS*NEW_CHUNK_DELAY
### Verbosity level
DEBUG 4

### Number of nodes in the network
SIZE 1000
### Number of chunks to transmit
CHUNKS 500
### Chunk size in bits
CHUNK_SIZE 122000
### Time in milliseconds to produce a new chunk
NEW_CHUNK_DELAY 1000
### Nodes degree
DEGREE 20
### Message delay: min and max
MINDELAY 5
MAXDELAY 25
### Observer Step in milliseconds
OBSERVER_STEP 10000
## Time in millisecond needed for a node to switch between states:
## push -> pull and vice-versa
SWITCHTIME 4
### Maximum number of push and pull attempts
PUSHRETRY 1
PULLRETRY 1
## Dropping rate [0:1]
## Currently, this protocol does not implement any form of "message recovery"
## therefor we are working on reliable channel.
DROP 0
## Maximum number of active connections in upload and download
## Active means that the node issues either a push or pull to a target node
## push for upload and pull for download.
ACT_UP 4
ACT_DW 4
## Maximum number of passice connections in upload and download
## Passive means that the node is the target node which receives either a push or pull request
## therefor it will either receive a chunk via push or satisfy a pull request.
PAS_DW 4
PAS_UP 4

## Window size for either push or pull active message, 
## the node either proposes PUSH_WIN chunks in push
## or PULL_WIN for pull
PUSH_WIN 10
PULL_WIN 10

#- - - - -  - P R O T O C O L S - - - - -  -#
#############Random Generator#############
random p4s.util.RandomRLC
random.seed SEED
##########Simulator parameter#########
network.size SIZE

simulation.endtime CYCLE
simulation.experiments 1
simulation.timebits 16
simulation.logtime OBSERVER-STEP
simulation.stdout p4s.util.PrintLogs

## Overlay network used
protocol.link p4s.core.DelayedNeighbor
protocol.link.capacity DEGREE
protocol.link.delay 2
# Many kinds of delay distributions
# 0 Uniform between max and min
# 1 Gaussian with mean
# 2 Exponential Truncated with mean
# 
# Peer selection 
# -1 Random
#  0 Delay oriented with probability
#
protocol.link.select 0
protocol.link.mudelay 80
protocol.link.devdelay 0
protocol.link.mindelay MINDELAY
protocol.link.maxdelay MAXDELAY

## Protocol used for chunks distribution
protocol.int Alternate
protocol.int.linkable link
protocol.int.transport urt

## Transport protocol used
protocol.urt UniformRandomTransportP4S
protocol.urt.mindelay MINDELAY
protocol.urt.maxdelay MAXDELAY

## Bandwidth protocol used
protocol.bwp bandwidth.BandwidthAwareProtocol

#- - - - - - I N I T I A L I Z E R S - - - - -  -#
## Overlay network initializer
init.rndlink WireKOutUnd
init.rndlink.k DEGREE
init.rndlink.protocol link

## Bandwidth protocol initializer
init.bwi bandwidth.BandwidthAwareInitializer
init.bwi.protocol bwp
init.bwi.debug 0
## CDF of bandwidth distribution
## separeted by commas:
## 128000,180000,290000
## 0.3,0.7,1
init.bwi.uploadBw 128000 #,180000,256000
init.bwi.downloadBw 640000 #,640000,640000
init.bwi.bandwidthPr 1 #0.3,0.7,1
init.bwi.active_upload ACT_UP
init.bwi.active_download ACT_DW
init.bwi.passive_upload PAS_UP
init.bwi.passive_download PAS_DW
## the following two parameters indicate the source upload/download bandwidth
## download is useless at the source, but it exists :)
init.bwi.srcup 128000
init.bwi.srcdw 640000

## Chunk distribution protocol initializer
init.ii AlternateInitializer
init.ii.protocol int
init.ii.bandwidth bwp
init.ii.chunks CHUNKS
init.ii.chunk_size CHUNK_SIZE
init.ii.push_retry PUSHRETRY
init.ii.pull_retry PULLRETRY
init.ii.switchtime SWITCHTIME
init.ii.debug DEBUG
init.ii.push_window PUSH_WIN
init.ii.pull_window PULL_WIN
## 0 - no knowledge on neighbors buffer states
## 1 - total knowledge on neighbors buffer state
init.ii.neighborsknow 0

## Initializers order
include.init rndlink bwi ii

#- - - - - - C O N T R O L S - - - - -  -#
## Control that produces chunks at the source
control.00 SourceObserver
control.00.protocol int
control.00.step NEW_CHUNK_DELAY

## Control collects statistics on the operation performed by
## peers in the chunk distribution process
control.04 OperationObserver
control.04.protocol int
control.04.step OBSERVER_STEP/5
control.04.size SIZE
control.04.chunks CHUNKS
## Write results at the end of each experiment
control.04.FINAL
control.04.debug DEBUG

## Control collects statistics on the time in
## which peers receives chunks
control.08 ChunksObserver
control.08.protocol int
control.08.step OBSERVER_STEP
control.08.size SIZE
control.08.chunks CHUNKS
## Write results at the end of each experiment
control.08.FINAL
control.08.debug DEBUG
