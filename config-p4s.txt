### Simulation seed
SEED 9381048245

### MAX Simulation time
CYCLE NETSIZE*CHUNKS*Ts

### Verbosity level
DEBUG 8

### Number of nodes in the network
NETSIZE 1000

### Number of chunks to transmit
CHUNKS 4000

### Nodes degree
DEGREE 8

### Message delay: min and max
DELTAmin 10
DELTAmax 250

## Bitrate streaming
Bs 1000000

### Time in milliseconds to produce a new chunk
Ts  1000

## Source Bandwitdth
BMs BMp

## Peers Bandwidth (Multiple of Bs)
#BMb ((Ts*100)/((Ts-DELTAmax)))
BMp 1.6

## Playout Time in seconds
PLAYT -1

## ROUNDS OF PULL
PULLROUNDS 0

### Type of delay distribution
# Many kinds of delay distributions
# 0 Uniform between max and min
# 1 Gaussian with mean
# 2 Exponential Truncated with mean
DDELAY 0
MUDELAY CCMUDELAY
DEVDELAY CCDEVDELAY


## Peer selection SELECT
#  0 Random dummy
#  1 Random smart
#  2 Delay oriented with probability

PPSEL 1

## Dropping rate [0:1]
## Currently, this protocol does not implement any form of "message recovery"
## therefor we are working on reliable channel.
DROP 0

## Maximum number of active connections in upload and download
## Active means that the node issues either a push or pull to a target node
## push for upload and pull for download.
ALPHA_up 1
ALPHA_down 1

## Maximum number of passice connections in upload and download
## Passive means that the node is the target node which receives either a push or pull request
## therefor it will either receive a chunk via push or satisfy a pull request.
PI_up 1
PI_down 10

## Window size for either push or pull active message,
## the node either proposes OMEGA_push chunks in push
## or OMEGA_pull for pull
OMEGA_push 1
OMEGA_pull 1

### Maximum number of push and pull attempts
RHO_push 1
RHO_pull 1

### Observer Step in milliseconds
SAMPLE_STEP 10000
BAND_STEP 1000

## Time in millisecond needed for a node to switch between states:
## push -> pull and vice-versa
SWITCHTIME 1

#- - - - -  - P R O T O C O L S - - - - -  -#
#############Random Generator#############
random p4s.util.RandomRLC
random.seed SEED
##########Simulator parameter#########
network.size NETSIZE

simulation.endtime CYCLE
simulation.experiments 30
simulation.timebits 16
simulation.logtime OBSERVER-STEP
#simulation.stdout p4s.util.PrintLogs

## Overlay network used
protocol.link p4s.core.DelayedNeighbor
{
    capacity DEGREE
    delay DDELAY
    select PPSEL
    mudelay MUDELAY
    devdelay DEVDELAY
    mindelay DELTAmin
    maxdelay DELTAmax
    debug DEBUG
    new_chunk Ts
}

## Protocol used for chunks distribution
protocol.int Alternate
{
    linkable link
    transport urt
}

## Transport protocol used
protocol.urt UniformRandomTransportP4S
{
    mindelay DELTAmin
    maxdelay DELTAmax
}

## Bandwidth protocol used
protocol.bwp bandwidth.core.BandwidthAwareProtocol

#- - - - - - I N I T I A L I Z E R S - - - - -  -#
## Overlay network initializer
init.rndlink WireKOutUnd
{
    k DEGREE
    protocol link
}

init.bwi bandwidth.core.BandwidthAwareInitializer
{
    protocol bwp
    debug DEBUG
    ## Base uplink value, e.g., it could be 1Mbit/s
    uplink Bs
    downlink Bs*10
    ## Source bandwidth, as uplink multiplicator. If absent is equato to maximum BMp.
    bms BMs
    ## Peers' upload bandwidth, as uplink multiplicator.
    ## e.g. "bmp 1.1 1.5 2.0" means that some peers will have 1.1Mb, other 1.5Mb and 2.0Mb of uplink"
    bmp BMp
    ## Set the bandwidth distribution over peers.
    ## e.g. "bdist 0.3,0.7,1.0" means that 30% of peer will have 1.1Mb, 40% will ahve 1.5 while 30% will have 2.0Mb.
    bdist 1
    ## Active connections are those started by node.
    ## Involving upload bandwidth
    active_upload ALPHA_up
    ## Involving download bandwidth
    active_download ALPHA_down
    ## Passive connections are those received by other nodes.
    ## Involving upload bandwidth
    passive_upload PI_up
    ## Involving download bandwidth
    passive_download PI_down
}


## Chunk distribution protocol initializer
init.ii AlternateInitializer
{
    protocol int
    bandwidth bwp
    chunks CHUNKS
    chunk_size Bs*Ts/1000
    push_retry RHO_push
    pull_retry RHO_pull
    switchtime SWITCHTIME
    new_chunk Ts
    debug DEBUG
    push_window OMEGA_push
    pull_window OMEGA_pull
    playout PLAYT
    pull_rounds PULLROUNDS
    ## 0 - no knowledge on neighbors buffer states
    ## 1 - total knowledge on neighbors buffer state
    neighborsknow 0
}

## Initializers order
include.init bwi rndlink  ii


#- - - - - - C O N T R O L S - - - - -  -#
## Streaming rate: Source side that produces a chunk every Ts
control.StreaminServer SourceObserver
{
    protocol int
    step Ts
}

## Control collects statistics on the time in which peers receives chunks
control.PeersController ChunksObserver
{
    protocol int
    step SAMPLE_STEP
    size NETSIZE
    chunks CHUNKS
    ## Write results at the end of each experiment
    FINAL
    debug DEBUG
}

control.UploadControl VectorObserver
{
  protocol bwp
  getter getUpload
  step BAND_STEP
}

control.DownloadControl VectorObserver
{
  protocol bwp
  getter getDownload
  step BAND_STEP
}